# -*- coding: utf-8 -*-
"""CNN_versao4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MXe7RWdmdQL1b2JBjPtL9L2wAPxBiBVH
"""

from google.colab import files
uploaded = files.upload()         # 1. Fazer upload

!unzip archive.zip -d dataset     # 2. Extrair

!ls dataset                       # 3. Ver conteúdo extraído

# training_revised.py

import os
import json
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.models import Model
from tensorflow.keras.layers import GlobalAveragePooling2D, Dropout, Dense
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from tensorflow.keras.optimizers import Adam

# Diretórios
BASE_DIR = 'dataset'  # Ajuste aqui se necessário
TRAIN_PATH = os.path.join(BASE_DIR, 'train')
VALID_PATH = os.path.join(BASE_DIR, 'valid')
MODEL_OUTPUT = 'models/model_revisado.keras'
CLASS_INDEX_OUTPUT = 'models/class_indices_revisado.json'

# Hiperparâmetros
IMAGE_SIZE = (224, 224)
BATCH = 32
EPOCHS = 50
LR = 1e-4

# Pré-processamento e Aumento de Dados
train_aug = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    zoom_range=0.2,
    width_shift_range=0.2,
    height_shift_range=0.2,
    horizontal_flip=True
)

valid_aug = ImageDataGenerator(rescale=1./255)

# Geradores de dados
train_flow = train_aug.flow_from_directory(
    TRAIN_PATH,
    target_size=IMAGE_SIZE,
    batch_size=BATCH,
    class_mode='categorical'
)

valid_flow = valid_aug.flow_from_directory(
    VALID_PATH,
    target_size=IMAGE_SIZE,
    batch_size=BATCH,
    class_mode='categorical'
)

# Salvar índices das classes
with open(CLASS_INDEX_OUTPUT, 'w') as f:
    json.dump(train_flow.class_indices, f)

# Modelo com MobileNetV2 (Transfer Learning)
base = MobileNetV2(input_shape=IMAGE_SIZE + (3,), include_top=False, weights='imagenet')
base.trainable = False

x = base.output
x = GlobalAveragePooling2D()(x)
x = Dropout(0.3)(x)
x = Dense(train_flow.num_classes, activation='softmax')(x)

model_final = Model(inputs=base.input, outputs=x)

model_final.compile(optimizer=Adam(learning_rate=LR),
                    loss='categorical_crossentropy',
                    metrics=['accuracy'])

# Callbacks
callbacks_list = [
    EarlyStopping(patience=5, restore_best_weights=True),
    ModelCheckpoint(MODEL_OUTPUT, save_best_only=True)
]

# Treinamento
model_final.fit(
    train_flow,
    validation_data=valid_flow,
    epochs=EPOCHS,
    callbacks=callbacks_list
)

print(f"Modelo final salvo em: {MODEL_OUTPUT}")

import matplotlib.pyplot as plt

acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(11)

plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Treino')
plt.plot(epochs_range, val_acc, label='Validação')
plt.title('Acurácia')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Treino')
plt.plot(epochs_range, val_loss, label='Validação')
plt.title('Perda')
plt.legend()

plt.show()

model.save("modelo_esportes.keras")

import tensorflow as tf

model = tf.keras.models.load_model('/content/modelo_esportes.keras')
model.summary()

dataset_path = '/content/dataset/valid'  # caminho onde estão as pastas de cada esporte

ds = tf.keras.utils.image_dataset_from_directory(
    dataset_path,
    image_size=(224, 224),
    batch_size=32,
    shuffle=False  # ordem importa para garantir mapeamento correto
)

class_names = ds.class_names
print(class_names)
